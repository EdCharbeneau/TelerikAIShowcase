@page "/basic-chat"
@using Microsoft.Extensions.AI
@inject IChatClient ai

<!--

Scroll position✅
Thinking indicator✅
Capture enter button✅

-->
@* Debounce must be 0 or prompt may be truncated. *@

<div class="k-d-flex k-justify-content-center k-w-full">
    <div class="k-w-1/3">
        <ChatList Messages="messages" Class="k-max-w-full" IsThinking="isThinking" />
        <span @onkeypress="SubmitOnEnter">
            <TelerikTextArea @bind-Value="@Prompt"
                             DebounceDelay="0"
                             AdornmentsOrientation="TextAreaAdornmentsOrientation.Horizontal"
                             ShowPrefixSeparator="false"
                             ShowSuffixSeparator="false"
                             ResizeMode="@TextAreaResizeMode.None"
                             Placeholder="Message  AskAI ..."
                             AriaLabel="Ask AI">
                <TextAreaSuffixTemplate>
                    <TelerikButton Icon="SvgIcon.ArrowUp" OnClick="AddMessage" Enabled="canSubmit"></TelerikButton>
                </TextAreaSuffixTemplate>
            </TelerikTextArea>
        </span>
    </div>
</div>


@code {
    bool isThinking;
    bool canSubmit => !string.IsNullOrWhiteSpace(Prompt) && !isThinking;

    string? Prompt { get; set; }
    List<ChatMessage> messages = [];

    protected override async Task OnInitializedAsync()
    {
        var system = new ChatMessage
            {
                Role = ChatRole.System,
                Text = "Greet the user in a friendly way, make them feel welcome."
            };

        await BeginThinking(async () =>
        {
            ChatResponse response = await ai.GetResponseAsync(system);

            response.Message.AuthorName = "Allen Issac";

            messages.Add(response.Message);
        });
    }

    async Task AddMessage()
    {
        ChatMessage userMessage = new()
            {
                Role = ChatRole.User,
                Text = Prompt,
                AuthorName = "You"
            };

        messages.Add(userMessage);
        Prompt = "";

        await BeginThinking(async () =>
        {
            ChatResponse response = await ai.GetResponseAsync(messages);

            response.Message.AuthorName = "Allen Issac";

            messages.Add(response.Message);
        });
    }

    /// <summary>
    /// Sets the isThinking flag to true, executes the provided action, and then sets the isThinking flag to false.
    /// </summary>
    /// <param name="action">The asynchronous action to be executed while thinking.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    async Task BeginThinking(Func<Task> action)
    {
        isThinking = true;
        try
        {
            await action();
        }
        finally
        {
            isThinking = false;
        }
    }


    /// <summary>
    /// Captures the Enter key press event and triggers the AddMessage method if the Enter key is pressed without the Shift key.
    /// </summary>
    /// <param name="args">The keyboard event arguments.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    Task SubmitOnEnter(KeyboardEventArgs args)
    {
        // Captures enter but not shift + enter
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            if (canSubmit)
                return AddMessage();
        }
        return Task.CompletedTask;
    }

}
