@page "/speech"
@using AIShowcase.WebApp.Components.TextToSpeechServices
@using System.Globalization
@inject ITextToSpeechService tts

<TelerikDropDownList Data="voices"
                     @bind-Value="SelectedVoiceId"
                     TextField="@nameof(Voice.DisplayName)"
                     ValueField="@nameof(Voice.Id)" />

<TelerikButton OnClick="GenerateAndSpeak">Introduction</TelerikButton>

<AudioPlayer @ref="AudioAPI" ShowControls="false"></AudioPlayer>

<TelerikButton OnClick="@(()=> AudioAPI.Pause())">Pause</TelerikButton>
<TelerikButton OnClick="@(()=> AudioAPI.Play())">Play</TelerikButton>

@code {

    AudioPlayer? AudioAPI { get; set; }
    string? SelectedVoiceId { get; set; }

    Voice[] voices = [];
    string text = "Text-to-speech, or TTS, is all about converting written text into spoken words using artificial intelligence. It's a game-changer for accessibility and more.";
    string? Base64SpeechAudio;

    protected override async Task OnInitializedAsync()
    {
        voices = await tts.GetVoices();
        if (voices.Length > 0)
        {
            var random = new Random();
            SelectedVoiceId = voices[random.Next(voices.Length)].Id;
        }
    }

    async Task GenerateAndSpeak()
    {
        if (SelectedVoiceId is null)
        {
            throw new InvalidOperationException("Voices were not loaded or selected");
        }
        if (AudioAPI is not null)
        {
            Base64SpeechAudio = await tts.GetSpeechAsBase64String(text, SelectedVoiceId, CultureInfo.CurrentCulture.Name);
            await AudioAPI.Load(Base64SpeechAudio);
            await AudioAPI.Play();
        }

    }

}
