@using AIShowcase.WebApp.Services.TextToSpeechServices
@using AIShowcase.WebApp.Services
@inject ITextToSpeechService tts
@inject ApplicationSettings settings

@if (visible)
{
    <div class="k-d-grid k-grid-cols-2 k-gap-2">
        <TelerikButton Class="k-col-span-2" FillMode="@ThemeConstants.Button.FillMode.Clear" OnClick="ToggleVoiceSelection" Icon="SvgIcon.ArrowLeft">Done</TelerikButton>
        @if (Voices.Length > 0)
        {
            foreach (var voice in Voices)
            {
                <TelerikButton OnClick="(() => OnClick(voice))"
                               Class="@cssClass(voice)">@voice.DisplayName</TelerikButton>
            }
        }
    </div>
}
else
{
    <TelerikButton Class="k-w-full" FillMode="@ThemeConstants.Button.FillMode.Clear" OnClick="ToggleVoiceSelection">Voice: @settings.SelectedVoice?.DisplayName </TelerikButton>
}

@code {
    private bool visible;
    private string cssClass(Voice voice) => voice.Id == settings.SelectedVoice?.Id ? "k-button-solid-primary k-button-solid" : "";
    private Voice[] Voices { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        settings.OnChange += SettingsChanged;
        var voices = await tts.GetVoices();
        Voices = voices.ToArray();
    }

    public void ToggleVoiceSelection()
    {
        visible = !visible;
    }

    private async Task OnClick(Voice voice)
    {
        settings.SetSelectedVoice(voice);
        await Task.CompletedTask;
    }

    private void SettingsChanged()
    {
        InvokeAsync(() => StateHasChanged());
    }

}
