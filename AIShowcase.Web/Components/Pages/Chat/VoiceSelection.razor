@using AIShowcase.WebApp.Services.TextToSpeechServices
@using AIShowcase.WebApp.Services
@inject ITextToSpeechService tts
<b>Voices</b>

<div class="k-d-grid k-grid-cols-2 k-gap-2">
    @if (Voices.Length > 0)
    {
        foreach (var item in Voices.Select((v, index) => new { v, index }))
        {
            <TelerikButton OnClick="(()=> OnClick(item.index))"
                           Class="@cssClass(item.v.Selected)">@item.v.Voice.DisplayName.Split(' ')[0]</TelerikButton>
        }
    }
</div>

@code {
    private string cssClass(bool selected) => selected ? "k-button-solid-primary k-button-solid" : "";
    private VoiceOption[] Voices { get; set; } = [];

    public string? SelectedVoiceId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var voices = await tts.GetVoices();
        Voices = voices.Select(v => new VoiceOption(false, v)).ToArray();
    }

    private async Task OnClick(int index)
    {
        Voices = Voices.Select(v => { v.Selected = false; return v; }).ToArray();
        Voices[index].Selected = true;
        SelectedVoiceId = Voices[index].Voice.Id;
        await Task.CompletedTask;
    }

    public class VoiceOption
    {
        public VoiceOption(bool selected, Voice voice)
        {
            Selected = selected;
            Voice = voice;
        }
        public bool Selected { get; set; }
        public Voice Voice { get; set; }
    };
}
