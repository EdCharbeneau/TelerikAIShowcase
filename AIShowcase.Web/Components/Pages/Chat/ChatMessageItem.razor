@using Markdig
@using Telerik.Blazor.Components.Common.Icon
@if (Message.Role == ChatRole.Assistant)
{
    @foreach (var content in Message.Contents)
    {
        if (content is TextContent { Text: { Length: > 0 } text })
        {
            <div class="@Message.Role k-w-full k-mb-8">
                @RenderMessage(Message.Text)
            </div>
        }
        if (content is FunctionCallContent { Name: "Search" } fcc && fcc.Arguments?.TryGetValue("searchPhrase", out var searchPhrase) is true)
        {
            <div class="k-w-full k-mb-4">
                <TelerikIcon Icon="SvgIcon.FilePdf"/>
                <span>Searching:</span>
                <span class="assistant-search-phrase">@searchPhrase</span>
                @if (fcc.Arguments?.TryGetValue("filenameFilter", out var filenameObj) is true && filenameObj is string filename && !string.IsNullOrEmpty(filename))
                {
                    <text> in </text>

                    <span class="assistant-search-phrase">@filename</span>
                }
            </div>
        }
    }
}
else
{
    @foreach (var content in Message.Contents)
    {
        if (content is TextContent { Text: { Length: > 0 } text })
        {

            <div class="@Message.Role k-d-flex k-justify-content-end k-w-full k-mb-8 k-font-weight-semibold">
                <div class="k-rounded-lg k-border-solid k-border-primary k-text-primary k-p-4 k-mb-4 k-elevation-2 k-w-fit-content">
                    @RenderMessage(Message.Text)
                </div>
            </div>
        }
        if (content is DataContent data && data.MediaType.Contains("image"))
        {
            <div class="k-d-flex k-flex-col k-align-items-end k-mb-8">
                <img src="@data.Uri" class="k-rounded-md k-w-1/4" alt="User uploaded image." title="User uploaded image." />
            </div>
        }
    }
}

@code {
        [Parameter, EditorRequired]
        public required ChatMessage Message { get; set; }

    private MarkupString? RenderMessage(string? text) {
            if(text is null) return null;
            string rawString = text;
            return (MarkupString)Markdown.ToHtml(text);
        }

}
