@using AIShowcase.WebApp.Components.ChatOutputServices
@using Markdig
@using Microsoft.Extensions.AI
@inject PrismInterop prism


            <div role="log" aria-label="Message list" aria-live="polite">
                <div @ref="messageListElement">
                    @foreach (ChatMessage m in GetFilteredMessages())
                    {
                        <ChatMessageItem Message="m"/>
                    }
                </div>
                <span>
                    @StreamingText
                    <TelerikSkeleton Visible="IsThinking" ShapeType="SkeletonShapeType.Text" Width="10vw" Height="20px" />
                </span>
        </div>


@code {
    ElementReference? messageListElement;
    List<ChatMessage> messageCache = new();
    bool shouldFormatSyntax;

    private IEnumerable<ChatMessage> GetFilteredMessages() => Messages.Where(m => m.Role == ChatRole.User || m.Role == ChatRole.Assistant);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public List<ChatMessage> Messages { get; set; } = new();

    [Parameter]
    public string? StreamingText { get; set; }

    [Parameter]
    public bool IsThinking { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFormatSyntax && messageListElement is not null)
        {
            await prism.HighlightAllUnder(messageListElement.Value);
        }
        shouldFormatSyntax = false;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        bool parameterExists = parameters.TryGetValue<List<ChatMessage>>(nameof(Messages), out var value);

        if (parameterExists && !messageCache.SequenceEqual(value!))
        {
            shouldFormatSyntax = true;
            messageCache = new List<ChatMessage>(value!);
        }
        await base.SetParametersAsync(parameters);
    }

    private MarkupString? RenderMessage(string? text) => text is not null ? (MarkupString)Markdown.ToHtml(text) : null;
}