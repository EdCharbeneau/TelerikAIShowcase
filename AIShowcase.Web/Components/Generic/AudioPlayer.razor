@inject AudioPlayerInterop ap

<audio @ref="@audioTagRef"
       autoplay="@autoplay"
       preload="none"
       controls="@ShowControls">
    @ChildContent
</audio>

@code {
    bool autoplay;

    ElementReference audioTagRef;

    [Parameter]
    public bool ShowControls { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnSourceChanged { get; set; }

    [Parameter]
    public string? TargetVisualizerId { get; set; }

    private void OnSourceChangedHandler()
    {
        OnSourceChanged.InvokeAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ap.InitializeAsync(audioTagRef, TargetVisualizerId);
            ap.OnSourceChanged += OnSourceChangedHandler;
        }
    }

    public async Task Stop()
    {
        await ap.Stop();
        StateHasChanged();
    }

    public async Task Load(string dataUri)
    {
        await ap.Load(dataUri);
        StateHasChanged();
    }

    public async Task Play()
    {
        autoplay = true;
        await ap.Play();
        StateHasChanged();
    }

    public async Task Pause()
    {
        await ap.Pause();
        StateHasChanged();
    }

    public async Task SetVolume(double volume)
    {
        await ap.SetVolume(volume);
        StateHasChanged();
    }

    public async Task Mute(bool isMuted)
    {
        await ap.Mute(isMuted);
        StateHasChanged();
    }
}
