@using AIShowcase.WebApp.Components.ChatOutputServices
@using Markdig
@using Microsoft.Extensions.AI
@namespace AIShowcase.WebApp.Components.Generic
@inject PrismInterop prism

<div class="k-d-flex k-flex-col">
    <div role="log" aria-label="Message list" aria-live="polite">
        <div @ref="messageListElement">
            @foreach (ChatMessage m in GetFilteredMessages())
            {
                if (m.Role == ChatRole.Assistant)
                {
                    <div class="@m.Role k-w-full k-mb-8">
                        @RenderMessage(m.Text)
                    </div>
                }
                else
                {
                    <div class="@m.Role k-d-flex k-justify-content-end k-w-full k-mb-8 k-font-weight-semibold">
                        <div class="k-rounded-lg k-border-solid k-border-primary k-text-primary k-p-4 k-mb-4 k-elevation-2 k-w-3/4">
                            @RenderMessage(m.Text)
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    ElementReference? messageListElement;
    List<ChatMessage> messageCache = new();
    bool shouldFormatSyntax;

    private IEnumerable<ChatMessage> GetFilteredMessages() => Messages.Where(m => m.Role == ChatRole.User || m.Role == ChatRole.Assistant);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public List<ChatMessage> Messages { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFormatSyntax && messageListElement is not null)
        {
            await prism.HighlightAllUnder(messageListElement.Value);
        }
        shouldFormatSyntax = false;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        bool parameterExists = parameters.TryGetValue<List<ChatMessage>>(nameof(Messages), out var value);

        if (parameterExists && !messageCache.SequenceEqual(value!))
        {
            shouldFormatSyntax = true;
            messageCache = new List<ChatMessage>(value!);
        }
        await base.SetParametersAsync(parameters);
    }

    private MarkupString? RenderMessage(string? text) => text is not null ? (MarkupString)Markdown.ToHtml(text) : null;
}